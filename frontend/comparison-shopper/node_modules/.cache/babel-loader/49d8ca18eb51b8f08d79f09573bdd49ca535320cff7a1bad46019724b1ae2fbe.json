{"ast":null,"code":"var _jsxFileName = \"/Users/Kiran/github-classroom/SEPT/team-project-group-p03-08/frontend/comparison-shopper/src/Components/CartPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { UserContext } from '../App.js';\nimport './CartPage.css';\n\n// export const addProductToCart = async (cartId, product) => {\n//     try {\n//         const response = await fetch('http://localhost:8080/v1/carts/add', {\n//             method: 'POST',\n//             headers: { 'Content-Type': 'application/json' },\n//             body: JSON.stringify({\n//                 cartid: cartId,\n//                 productid: product.productID,\n//                 quantity: 1\n//             })\n//         });\n\n//         if (!response.ok) {\n//             console.error(\"Error adding product to cart:\", await response.text());\n//         }\n//     } catch (error) {\n//         console.error(\"Failed to add product to cart:\", error);\n//     }\n// };\n\n// export const handleAddToCart = async (product) => {\n//     try {\n//         // Fetch all the prices for the given product ID\n//         const priceResponse = await fetch(`http://localhost:8080/v1/products/price/${product.productID}`);\n//         const priceDataArray = await priceResponse.json();\n\n//         const lowestPricedItem = getLowestPricedItem(priceDataArray);\n//         console.log(cart)\n//         console.log(product)\n//         console.log(\"TYLER\")\n\n//         if (lowestPricedItem) {\n//             const productWithLowestPrice = {\n//                 ...product,\n//                 price: lowestPricedItem.price,\n//                 supermarket: lowestPricedItem.supermarket\n//             };\n//             addProductToCart(productWithLowestPrice);  // Here is where we changed the function name\n//             navigate('/CartPage.js'); // This should probably be just '/cart' depending on your routes\n//         } else {\n//             console.error(`Failed to fetch price for productID: ${product.productID}`);\n//         }\n//     } catch (error) {\n//         console.error(`Error fetching price for productID: ${product.productID}`, error);\n//     }\n// };\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getLowestPricedItem(productArray) {\n  return productArray.sort((a, b) => a.price - b.price)[0];\n}\nexport const addProductWithLowestPriceToCart = async (product, cart) => {\n  try {\n    // Fetch all the prices for the given product ID\n    const priceResponse = await fetch(`http://localhost:8080/v1/products/price/${product.productID}`);\n    const priceDataArray = await priceResponse.json();\n    const lowestPricedItem = getLowestPricedItem(priceDataArray);\n    if (lowestPricedItem) {\n      const productWithLowestPrice = {\n        ...product,\n        price: lowestPricedItem.price,\n        supermarket: lowestPricedItem.supermarket\n      };\n\n      // Adding product to cart\n      const response = await fetch('http://localhost:8080/v1/carts/add', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          cartid: cart.cartID,\n          productid: productWithLowestPrice.productID,\n          quantity: 1\n        })\n      });\n      if (!response.ok) {\n        console.error(\"Error adding product to cart:\", await response.text());\n      } else {\n        //navigate('/CartPage.js'); // This should probably be just '/cart' depending on your routes\n      }\n    } else {\n      console.error(`Failed to fetch price for productID: ${product.productID}`);\n    }\n  } catch (error) {\n    console.error(`Error fetching price for productID: ${product.productID}`, error);\n  }\n};\nconst CartPage = () => {\n  _s();\n  const {\n    user\n  } = useContext(UserContext);\n  const [cart, setCart] = useState([]);\n  const [products, setProducts] = useState([]);\n  const navigate = useNavigate();\n  const roundedQuantity = num => Math.round(num * 100) / 100;\n  const productPage = productId => {\n    navigate(`/product/${productId}`);\n  };\n  const fetchProductWithLowestPrice = async id => {\n    const response = await fetch(`http://localhost:8080/v1/products/price/${id}`);\n    const priceData = await response.json();\n    const lowestPriceObject = priceData.reduce((lowest, current) => {\n      return current.price < lowest.price ? current : lowest;\n    });\n    return lowestPriceObject.price;\n  };\n  useEffect(() => {\n    if (!user || !user.UserID) return;\n    const fetchCartForUser = async () => {\n      const response = await fetch(`http://localhost:8080/v1/carts/customer/${user.UserID}`);\n      const data = await response.json();\n      if (data && data.contents) {\n        setCart(data);\n        const productPromises = Object.keys(data.contents).map(async id => {\n          const product = await fetch(`http://localhost:8080/v1/products/${id}`).then(res => res.json());\n          product.quantity = data.contents[id];\n          product.price = await fetchProductWithLowestPrice(id);\n          return product;\n        });\n        const fetchedProducts = await Promise.all(productPromises);\n        setProducts(fetchedProducts);\n      }\n    };\n    fetchCartForUser();\n  }, [user]);\n  const handleQuantityChange = async (productId, newQuantity) => {\n    console.log(`Attempting to update product ${productId} with quantity ${newQuantity}`);\n    console.log(cart.cartID);\n    console.log(productId);\n    console.log(newQuantity);\n    if (newQuantity >= 1) {\n      const updatedContents = {\n        ...cart.contents,\n        [productId]: newQuantity\n      };\n      const updatedCart = {\n        ...cart,\n        contents: updatedContents\n      };\n      setCart(updatedCart);\n      try {\n        await fetch('http://localhost:8080/v1/carts/set', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            cartid: cart.cartID,\n            productid: productId,\n            quantity: newQuantity\n          })\n        });\n        const updatedProducts = products.map(product => {\n          if (product.productID === productId) {\n            return {\n              ...product,\n              quantity: newQuantity\n            };\n          }\n          return product;\n        });\n        setProducts(updatedProducts);\n      } catch (error) {\n        console.error(\"Error updating product quantity:\", error);\n      }\n    }\n  };\n  const removeFromCart = async productId => {\n    await fetch(`http://localhost:8080/v1/carts/delete`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        cartid: cart.cartID,\n        productid: productId\n      })\n    });\n    const updatedProducts = products.filter(product => product.productID !== productId);\n    setProducts(updatedProducts);\n  };\n  const clearCart = async () => {\n    for (let product of products) {\n      await fetch(`http://localhost:8080/v1/carts/delete`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          cartid: cart.cartID,\n          productid: product.productID\n        })\n      });\n    }\n    setCart(prevCart => ({\n      ...prevCart,\n      contents: {}\n    }));\n    setProducts([]);\n  };\n  const grandTotal = products.reduce((acc, product) => acc + product.price * product.quantity, 0);\n  const getProductIdsByCartId = (cart, cartId) => {\n    if (cart && cart.cartID === cartId && cart.contents) {\n      return Object.keys(cart.contents).map(Number);\n    }\n    return [];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cartWrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Items in cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Product Photo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Product Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Quantity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Total\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: products.map(product => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => productPage(product.productID),\n              style: {\n                border: 'none',\n                background: 'transparent'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: '/products/' + product.productID + '.webp',\n                alt: \"Image of \" + product.productName,\n                width: 70,\n                style: {\n                  border: '2px solid #000',\n                  borderRadius: '5px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: product.productName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => removeFromCart(product.productID),\n              className: \"removeBtn\",\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Qty:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: product.quantity,\n              onChange: e => {\n                handleQuantityChange(product.productID, parseInt(e.target.value));\n              },\n              className: \"quantityInput\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"Total: $\", roundedQuantity(product.price * (product.quantity || 1))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 29\n          }, this)]\n        }, product.productID, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clearCartGroup\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearCart,\n        className: \"clearCart\",\n        children: \"Clear Cart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Grand Total: $\", roundedQuantity(grandTotal)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttonsGroup\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"continueBtn\",\n        children: \"Continue Shopping\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"checkoutBtn\",\n        children: \"Proceed To Checkout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(user.Name),\n      children: \" test Button\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 9\n  }, this);\n};\n_s(CartPage, \"Rizscxe0rwJIzcMv4pEOrPyuhxg=\", false, function () {\n  return [useNavigate];\n});\n_c = CartPage;\nexport default CartPage;\nvar _c;\n$RefreshReg$(_c, \"CartPage\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useNavigate","UserContext","jsxDEV","_jsxDEV","getLowestPricedItem","productArray","sort","a","b","price","addProductWithLowestPriceToCart","product","cart","priceResponse","fetch","productID","priceDataArray","json","lowestPricedItem","productWithLowestPrice","supermarket","response","method","headers","body","JSON","stringify","cartid","cartID","productid","quantity","ok","console","error","text","CartPage","_s","user","setCart","products","setProducts","navigate","roundedQuantity","num","Math","round","productPage","productId","fetchProductWithLowestPrice","id","priceData","lowestPriceObject","reduce","lowest","current","UserID","fetchCartForUser","data","contents","productPromises","Object","keys","map","then","res","fetchedProducts","Promise","all","handleQuantityChange","newQuantity","log","updatedContents","updatedCart","updatedProducts","removeFromCart","filter","clearCart","prevCart","grandTotal","acc","getProductIdsByCartId","cartId","Number","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","border","background","src","alt","productName","width","borderRadius","type","value","onChange","e","parseInt","target","Name","_c","$RefreshReg$"],"sources":["/Users/Kiran/github-classroom/SEPT/team-project-group-p03-08/frontend/comparison-shopper/src/Components/CartPage.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {UserContext} from '../App.js';\nimport './CartPage.css';\n\n\n// export const addProductToCart = async (cartId, product) => {\n//     try {\n//         const response = await fetch('http://localhost:8080/v1/carts/add', {\n//             method: 'POST',\n//             headers: { 'Content-Type': 'application/json' },\n//             body: JSON.stringify({\n//                 cartid: cartId,\n//                 productid: product.productID,\n//                 quantity: 1\n//             })\n//         });\n        \n//         if (!response.ok) {\n//             console.error(\"Error adding product to cart:\", await response.text());\n//         }\n//     } catch (error) {\n//         console.error(\"Failed to add product to cart:\", error);\n//     }\n// };\n\n// export const handleAddToCart = async (product) => {\n//     try {\n//         // Fetch all the prices for the given product ID\n//         const priceResponse = await fetch(`http://localhost:8080/v1/products/price/${product.productID}`);\n//         const priceDataArray = await priceResponse.json();\n    \n//         const lowestPricedItem = getLowestPricedItem(priceDataArray);\n//         console.log(cart)\n//         console.log(product)\n//         console.log(\"TYLER\")\n    \n//         if (lowestPricedItem) {\n//             const productWithLowestPrice = {\n//                 ...product,\n//                 price: lowestPricedItem.price,\n//                 supermarket: lowestPricedItem.supermarket\n//             };\n//             addProductToCart(productWithLowestPrice);  // Here is where we changed the function name\n//             navigate('/CartPage.js'); // This should probably be just '/cart' depending on your routes\n//         } else {\n//             console.error(`Failed to fetch price for productID: ${product.productID}`);\n//         }\n//     } catch (error) {\n//         console.error(`Error fetching price for productID: ${product.productID}`, error);\n//     }\n// };\n\nfunction getLowestPricedItem(productArray) {\n    return productArray.sort((a, b) => a.price - b.price)[0];\n}\n\nexport const addProductWithLowestPriceToCart = async (product, cart) => {\n    try {\n        // Fetch all the prices for the given product ID\n        const priceResponse = await fetch(`http://localhost:8080/v1/products/price/${product.productID}`);\n        const priceDataArray = await priceResponse.json();\n    \n        const lowestPricedItem = getLowestPricedItem(priceDataArray);\n    \n        if (lowestPricedItem) {\n            const productWithLowestPrice = {\n                ...product,\n                price: lowestPricedItem.price,\n                supermarket: lowestPricedItem.supermarket\n            };\n            \n            // Adding product to cart\n            const response = await fetch('http://localhost:8080/v1/carts/add', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    cartid: cart.cartID, \n                    productid: productWithLowestPrice.productID,\n                    quantity: 1\n                })\n            });\n            \n            if (!response.ok) {\n                console.error(\"Error adding product to cart:\", await response.text());\n            } else {\n                //navigate('/CartPage.js'); // This should probably be just '/cart' depending on your routes\n            }\n            \n        } else {\n            console.error(`Failed to fetch price for productID: ${product.productID}`);\n        }\n    } catch (error) {\n        console.error(`Error fetching price for productID: ${product.productID}`, error);\n    }\n};\n\n\n\nconst CartPage = () => {\n    const { user } = useContext(UserContext);\n    const [cart, setCart] = useState([]);\n    const [products, setProducts] = useState([]);\n    const navigate = useNavigate();\n\n    const roundedQuantity = (num) => Math.round(num * 100) / 100;\n\n    const productPage = (productId) => {\n        navigate(`/product/${productId}`);\n    };\n\n    const fetchProductWithLowestPrice = async (id) => {\n        const response = await fetch(`http://localhost:8080/v1/products/price/${id}`);\n        const priceData = await response.json();\n    \n        const lowestPriceObject = priceData.reduce((lowest, current) => {\n            return (current.price < lowest.price) ? current : lowest;\n        });\n    \n        return lowestPriceObject.price;\n    };\n\n    useEffect(() => {\n        if (!user || !user.UserID) return; \n    \n        const fetchCartForUser = async () => {\n            const response = await fetch(`http://localhost:8080/v1/carts/customer/${user.UserID}`);\n            const data = await response.json();\n            if (data && data.contents) {\n                setCart(data);\n    \n                const productPromises = Object.keys(data.contents).map(async id => {\n                    const product = await fetch(`http://localhost:8080/v1/products/${id}`).then(res => res.json());\n                    product.quantity = data.contents[id];\n                    product.price = await fetchProductWithLowestPrice(id); \n                    return product;\n                });\n    \n                const fetchedProducts = await Promise.all(productPromises);\n                setProducts(fetchedProducts);\n            }\n        };\n    \n        fetchCartForUser();\n    }, [user]);\n    \n\n    const handleQuantityChange = async (productId, newQuantity) => {\n\n        console.log(`Attempting to update product ${productId} with quantity ${newQuantity}`); \n        console.log(cart.cartID);\n        console.log(productId);\n        console.log(newQuantity);\n\n        if (newQuantity >= 1) {\n            const updatedContents = { ...cart.contents, [productId]: newQuantity };\n            const updatedCart = { ...cart, contents: updatedContents };\n            setCart(updatedCart);\n\n            try {\n                await fetch('http://localhost:8080/v1/carts/set', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                        cartid: cart.cartID,\n                        productid: productId,\n                        quantity: newQuantity\n                    })\n                });\n                \n\n                const updatedProducts = products.map(product => {\n                    if (product.productID === productId) {\n                        return { ...product, quantity: newQuantity };\n                    }\n                    return product;\n                });\n                setProducts(updatedProducts);\n            } catch (error) {\n                console.error(\"Error updating product quantity:\", error);\n            }\n        }\n    };\n    \n    \n\n    const removeFromCart = async (productId) => {\n        await fetch(`http://localhost:8080/v1/carts/delete`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                cartid: cart.cartID,\n                productid: productId,\n            })\n        });\n\n        const updatedProducts = products.filter(product => product.productID !== productId);\n        setProducts(updatedProducts);\n    };\n    \n    const clearCart = async () => {\n        for (let product of products) {\n            await fetch(`http://localhost:8080/v1/carts/delete`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    cartid: cart.cartID,\n                    productid: product.productID,\n                })\n            });\n        }\n\n        setCart(prevCart => ({ ...prevCart, contents: {} }));\n        setProducts([]);\n    };\n    \n    \n    const grandTotal = products.reduce((acc, product) => acc + product.price * product.quantity, 0);\n        \n    const getProductIdsByCartId = (cart, cartId) => {\n        if (cart && cart.cartID === cartId && cart.contents) {\n            return Object.keys(cart.contents).map(Number);\n        }\n        return [];\n    };\n    \n    \n    return (\n        <div className=\"cartWrapper\">\n            <h2>Items in cart</h2>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Product Photo</th>\n                        <th>Product Name</th>\n                        <th></th>\n                        <th>Quantity</th>\n                        <th>Total</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {products.map((product) => (\n                        <tr key={product.productID}>\n                            <td>\n                                <button onClick={() => productPage(product.productID)} style={{border: 'none', background: 'transparent'}}>\n                                    <img src={'/products/' + product.productID + '.webp'} \n                                        alt={\"Image of \" + product.productName} \n                                        width={70} \n                                        style={{border: '2px solid #000', borderRadius: '5px'}} />\n                                </button>\n                            </td>\n                            <td>{product.productName}</td>\n                            <td><button onClick={() => removeFromCart(product.productID)} className=\"removeBtn\">Remove</button></td>\n                            <td>\n                                <span>Qty:</span>\n                                <input type=\"number\" value={product.quantity} onChange={(e) => {handleQuantityChange(product.productID, parseInt(e.target.value)); }} className=\"quantityInput\" />\n                            </td>\n                            <td>Total: ${roundedQuantity(product.price * (product.quantity || 1))}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n            <div className=\"clearCartGroup\">\n                <button onClick={clearCart} className=\"clearCart\">Clear Cart</button>\n                <span>Grand Total: ${roundedQuantity(grandTotal)}</span>\n            </div>\n            <div className=\"buttonsGroup\">\n                <button className=\"continueBtn\">Continue Shopping</button>\n                <button className=\"checkoutBtn\">Proceed To Checkout</button>\n            </div>\n            <button onClick={() => console.log(user.Name)} > test Button</button>\n        </div>\n    );\n}\nexport default CartPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}