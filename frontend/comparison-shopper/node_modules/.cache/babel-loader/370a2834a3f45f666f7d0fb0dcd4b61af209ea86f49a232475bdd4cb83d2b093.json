{"ast":null,"code":"var _jsxFileName = \"/Users/Kiran/github-classroom/SEPT/team-project-group-p03-08/frontend/comparison-shopper/src/Components/CartPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { UserContext } from '../App.js';\nimport './CartPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const addProductWithLowestPriceToCart = async (product, cart, navigate) => {\n  try {\n    // Fetch all the prices for the given product ID\n    const priceResponse = await fetch(process.env.REACT_APP_API_URL + \"/v1/products/price/\" + product.productID);\n    const priceDataArray = await priceResponse.json();\n\n    // Find the lowest-priced item\n    const lowestPricedItem = priceDataArray.sort((a, b) => a.price - b.price)[0];\n    if (lowestPricedItem) {\n      const productWithLowestPrice = {\n        ...product,\n        price: lowestPricedItem.price,\n        supermarket: lowestPricedItem.supermarket\n      };\n\n      // Check if product is already in the cart\n      const existingProductInCart = cart.contents && cart.contents[product.productID];\n      if (existingProductInCart) {\n        // If product exists, increment its quantity by 1\n        const updatedQuantity = existingProductInCart + 1;\n        await fetch(process.env.REACT_APP_API_URL + \"/v1/carts/set\", {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            cartid: cart.cartID,\n            productid: product.productID,\n            quantity: updatedQuantity\n          })\n        });\n      } else {\n        // If product doesn't exist in the cart, add it with a quantity of 1\n        await fetch(process.env.REACT_APP_API_URL + \"/v1/carts/add\", {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            cartid: cart.cartID,\n            productid: productWithLowestPrice.productID,\n            quantity: 1\n          })\n        });\n      }\n      navigate('/cart');\n    } else {\n      console.error(`Failed to fetch price for productID: ${product.productID}`);\n    }\n  } catch (error) {\n    console.error(`Error handling product in cart for productID: ${product.productID}`, error);\n  }\n};\nconst CartPage = () => {\n  _s();\n  const {\n    user\n  } = useContext(UserContext);\n  const [cart, setCart] = useState([]);\n  const [products, setProducts] = useState([]);\n  const navigate = useNavigate();\n  const roundedQuantity = num => Math.round(num * 100) / 100;\n  const grandTotal = products.reduce((acc, product) => acc + product.price * product.quantity, 0);\n  const productPage = productId => {\n    navigate(`/product/${productId}`);\n  };\n  const goToSearchResults = () => {\n    navigate('/search');\n  };\n  const goToCheckout = () => {\n    navigate('/checkout');\n  };\n  const fetchProductWithLowestPrice = async id => {\n    const response = await fetch(process.env.REACT_APP_API_URL + \"/v1/products/price/\" + id);\n    const priceData = await response.json();\n    const lowestPriceObject = priceData.reduce((lowest, current) => {\n      return current.price < lowest.price ? current : lowest;\n    });\n    return lowestPriceObject.price;\n  };\n  useEffect(() => {\n    if (!user || !user.UserID) return;\n    const fetchCartForUser = async () => {\n      const response = await fetch(process.env.REACT_APP_API_URL + \"/v1/carts/customer/\" + user.UserID);\n      const data = await response.json();\n      if (data && data.contents) {\n        setCart(data);\n        const productPromises = Object.keys(data.contents).map(async id => {\n          const product = await fetch(process.env.REACT_APP_API_URL + \"/v1/products/\" + id).then(res => res.json());\n          product.quantity = data.contents[id];\n          product.price = await fetchProductWithLowestPrice(id);\n          return product;\n        });\n        const fetchedProducts = await Promise.all(productPromises);\n        setProducts(fetchedProducts);\n      }\n    };\n    fetchCartForUser();\n  }, [user]);\n  const handleQuantityChange = async (productId, newQuantity) => {\n    console.log(`Attempting to update product ${productId} with quantity ${newQuantity}`);\n    console.log(cart.cartID);\n    console.log(productId);\n    console.log(newQuantity);\n    if (newQuantity >= 1) {\n      const updatedContents = {\n        ...cart.contents,\n        [productId]: newQuantity\n      };\n      const updatedCart = {\n        ...cart,\n        contents: updatedContents\n      };\n      setCart(updatedCart);\n      try {\n        await fetch(process.env.REACT_APP_API_URL + \"/v1/carts/set\", {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            cartid: cart.cartID,\n            productid: productId,\n            quantity: newQuantity\n          })\n        });\n        const updatedProducts = products.map(product => {\n          if (product.productID === productId) {\n            return {\n              ...product,\n              quantity: newQuantity\n            };\n          }\n          return product;\n        });\n        setProducts(updatedProducts);\n      } catch (error) {\n        console.error(\"Error updating product quantity:\", error);\n      }\n    }\n  };\n  const removeFromCart = async productId => {\n    await fetch(process.env.REACT_APP_API_URL + \"/v1/carts/delete\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        cartid: cart.cartID,\n        productid: productId\n      })\n    });\n    const updatedProducts = products.filter(product => product.productID !== productId);\n    setProducts(updatedProducts);\n  };\n  const clearCart = async () => {\n    for (let product of products) {\n      await fetch(process.env.REACT_APP_API_URL + \"/v1/carts/delete\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          cartid: cart.cartID,\n          productid: product.productID\n        })\n      });\n    }\n    setCart(prevCart => ({\n      ...prevCart,\n      contents: {}\n    }));\n    setProducts([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cartWrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Items in cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Product Photo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Product Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Quantity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Total\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: products.map(product => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => productPage(product.productID),\n              style: {\n                border: 'none',\n                background: 'transparent'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: '/products/' + product.productID + '.webp',\n                alt: \"Image of \" + product.productName,\n                width: 70,\n                style: {\n                  border: '2px solid #000',\n                  borderRadius: '5px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: product.productName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => removeFromCart(product.productID),\n              className: \"removeBtn\",\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Qty:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: product.quantity,\n              onChange: e => {\n                handleQuantityChange(product.productID, parseInt(e.target.value));\n              },\n              className: \"quantityInput\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"Total: $\", roundedQuantity(product.price * (product.quantity || 1))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 29\n          }, this)]\n        }, product.productID, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clearCartGroup\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearCart,\n        className: \"clearCart\",\n        children: \"Clear Cart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Grand Total: $\", roundedQuantity(grandTotal)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttonsGroup\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"continueBtn\",\n        onClick: goToSearchResults,\n        children: \"Continue Shopping\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"checkoutBtn\",\n        onClick: goToCheckout,\n        children: \"Proceed To Checkout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 9\n  }, this);\n};\n_s(CartPage, \"Rizscxe0rwJIzcMv4pEOrPyuhxg=\", false, function () {\n  return [useNavigate];\n});\n_c = CartPage;\nexport default CartPage;\nvar _c;\n$RefreshReg$(_c, \"CartPage\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useNavigate","UserContext","jsxDEV","_jsxDEV","addProductWithLowestPriceToCart","product","cart","navigate","priceResponse","fetch","process","env","REACT_APP_API_URL","productID","priceDataArray","json","lowestPricedItem","sort","a","b","price","productWithLowestPrice","supermarket","existingProductInCart","contents","updatedQuantity","method","headers","body","JSON","stringify","cartid","cartID","productid","quantity","console","error","CartPage","_s","user","setCart","products","setProducts","roundedQuantity","num","Math","round","grandTotal","reduce","acc","productPage","productId","goToSearchResults","goToCheckout","fetchProductWithLowestPrice","id","response","priceData","lowestPriceObject","lowest","current","UserID","fetchCartForUser","data","productPromises","Object","keys","map","then","res","fetchedProducts","Promise","all","handleQuantityChange","newQuantity","log","updatedContents","updatedCart","updatedProducts","removeFromCart","filter","clearCart","prevCart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","border","background","src","alt","productName","width","borderRadius","type","value","onChange","e","parseInt","target","_c","$RefreshReg$"],"sources":["/Users/Kiran/github-classroom/SEPT/team-project-group-p03-08/frontend/comparison-shopper/src/Components/CartPage.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {UserContext} from '../App.js';\nimport './CartPage.css';\n\n\nexport const addProductWithLowestPriceToCart = async (product, cart, navigate) => {\n    try {\n        // Fetch all the prices for the given product ID\n        const priceResponse = await fetch(process.env.REACT_APP_API_URL+\"/v1/products/price/\"+product.productID);\n        const priceDataArray = await priceResponse.json();\n\n        // Find the lowest-priced item\n        const lowestPricedItem = priceDataArray.sort((a, b) => a.price - b.price)[0];\n    \n        if (lowestPricedItem) {\n            const productWithLowestPrice = {\n                ...product,\n                price: lowestPricedItem.price,\n                supermarket: lowestPricedItem.supermarket\n            };\n            \n            // Check if product is already in the cart\n            const existingProductInCart = cart.contents && cart.contents[product.productID];\n    \n            if (existingProductInCart) {\n                // If product exists, increment its quantity by 1\n                const updatedQuantity = existingProductInCart + 1;\n                await fetch(process.env.REACT_APP_API_URL+\"/v1/carts/set\", {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                        cartid: cart.cartID,\n                        productid: product.productID,\n                        quantity: updatedQuantity\n                    })\n                });\n            } else {\n                // If product doesn't exist in the cart, add it with a quantity of 1\n                await fetch(process.env.REACT_APP_API_URL+\"/v1/carts/add\", {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                        cartid: cart.cartID,\n                        productid: productWithLowestPrice.productID,\n                        quantity: 1\n                    })\n                });\n            }\n\n            navigate('/cart');\n        } else {\n            console.error(`Failed to fetch price for productID: ${product.productID}`);\n        }\n    } catch (error) {\n        console.error(`Error handling product in cart for productID: ${product.productID}`, error);\n    }\n};\n\n\n\nconst CartPage = () => {\n    const { user } = useContext(UserContext);\n    const [cart, setCart] = useState([]);\n    const [products, setProducts] = useState([]);\n    const navigate = useNavigate();\n\n    const roundedQuantity = (num) => Math.round(num * 100) / 100;\n    const grandTotal = products.reduce((acc, product) => acc + product.price * product.quantity, 0);\n\n    const productPage = (productId) => {\n        navigate(`/product/${productId}`);\n    };\n\n    const goToSearchResults = () => {\n        navigate('/search');\n    }\n    \n    const goToCheckout = () => {\n        navigate('/checkout');\n    }\n\n    const fetchProductWithLowestPrice = async (id) => {\n        const response = await fetch(process.env.REACT_APP_API_URL+\"/v1/products/price/\"+id);\n        const priceData = await response.json();\n    \n        const lowestPriceObject = priceData.reduce((lowest, current) => {\n            return (current.price < lowest.price) ? current : lowest;\n        });\n    \n        return lowestPriceObject.price;\n    };\n\n    useEffect(() => {\n        if (!user || !user.UserID) return; \n    \n        const fetchCartForUser = async () => {\n            const response = await fetch(process.env.REACT_APP_API_URL+\"/v1/carts/customer/\"+user.UserID);\n            const data = await response.json();\n            if (data && data.contents) {\n                setCart(data);\n    \n                const productPromises = Object.keys(data.contents).map(async id => {\n                    const product = await fetch(process.env.REACT_APP_API_URL+\"/v1/products/\"+id).then(res => res.json());\n                    product.quantity = data.contents[id];\n                    product.price = await fetchProductWithLowestPrice(id); \n                    return product;\n                });\n    \n                const fetchedProducts = await Promise.all(productPromises);\n                setProducts(fetchedProducts);\n            }\n        };\n    \n        fetchCartForUser();\n    }, [user]);\n\n\n    const handleQuantityChange = async (productId, newQuantity) => {\n\n        console.log(`Attempting to update product ${productId} with quantity ${newQuantity}`); \n        console.log(cart.cartID);\n        console.log(productId);\n        console.log(newQuantity);\n\n        if (newQuantity >= 1) {\n            const updatedContents = { ...cart.contents, [productId]: newQuantity };\n            const updatedCart = { ...cart, contents: updatedContents };\n            setCart(updatedCart);\n\n            try {\n                await fetch(process.env.REACT_APP_API_URL+\"/v1/carts/set\", {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                        cartid: cart.cartID,\n                        productid: productId,\n                        quantity: newQuantity\n                    })\n                });\n                \n\n                const updatedProducts = products.map(product => {\n                    if (product.productID === productId) {\n                        return { ...product, quantity: newQuantity };\n                    }\n                    return product;\n                });\n                setProducts(updatedProducts);\n            } catch (error) {\n                console.error(\"Error updating product quantity:\", error);\n            }\n        }\n    };\n    \n\n    const removeFromCart = async (productId) => {\n        await fetch(process.env.REACT_APP_API_URL+\"/v1/carts/delete\", {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                cartid: cart.cartID,\n                productid: productId,\n            })\n        });\n\n        const updatedProducts = products.filter(product => product.productID !== productId);\n        setProducts(updatedProducts);\n    };\n\n    \n    const clearCart = async () => {\n        for (let product of products) {\n            await fetch(process.env.REACT_APP_API_URL+\"/v1/carts/delete\", {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    cartid: cart.cartID,\n                    productid: product.productID,\n                })\n            });\n        }\n\n        setCart(prevCart => ({ ...prevCart, contents: {} }));\n        setProducts([]);\n    };\n    \n    \n    return (\n        <div className=\"cartWrapper\">\n            <h2>Items in cart</h2>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Product Photo</th>\n                        <th>Product Name</th>\n                        <th></th>\n                        <th>Quantity</th>\n                        <th>Total</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {products.map((product) => (\n                        <tr key={product.productID}>\n                            <td>\n                                <button onClick={() => productPage(product.productID)} style={{border: 'none', background: 'transparent'}}>\n                                    <img src={'/products/' + product.productID + '.webp'} \n                                        alt={\"Image of \" + product.productName} \n                                        width={70} \n                                        style={{border: '2px solid #000', borderRadius: '5px'}} />\n                                </button>\n                            </td>\n                            <td>{product.productName}</td>\n                            <td><button onClick={() => removeFromCart(product.productID)} className=\"removeBtn\">Remove</button></td>\n                            <td>\n                                <span>Qty:</span>\n                                <input type=\"number\" value={product.quantity} onChange={(e) => {handleQuantityChange(product.productID, parseInt(e.target.value)); }} className=\"quantityInput\" />\n                            </td>\n                            <td>Total: ${roundedQuantity(product.price * (product.quantity || 1))}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n            <div className=\"clearCartGroup\">\n                <button onClick={clearCart} className=\"clearCart\">Clear Cart</button>\n                <span>Grand Total: ${roundedQuantity(grandTotal)}</span>\n            </div>\n            <div className=\"buttonsGroup\">\n                <button className=\"continueBtn\" onClick={goToSearchResults}>Continue Shopping</button>\n                <button className=\"checkoutBtn\" onClick={goToCheckout}>Proceed To Checkout</button>\n            </div>\n        </div>\n    );\n}\n\nexport default CartPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}