{"ast":null,"code":"var _jsxFileName = \"/Users/Kiran/github-classroom/SEPT/team-project-group-p03-08/frontend/comparison-shopper/src/Components/CartPage.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState, useContext } from 'react';\n// import { useParams } from 'react-router-dom';\n// import './CartPage.css';\n// import { UserContext } from '../App';\n\nimport React, { useContext, useEffect } from 'react';\nimport { UserContext } from '../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function updateCartOnServer(userId, cart) {\n  await fetch(`http://localhost:8080/v1/carts/update`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      userId,\n      cart\n    })\n  });\n}\nconst productPage = productID => {\n  window.location.href = `/product/${productID}`;\n};\nconst roundedQuantity = quantity => {\n  return parseFloat(quantity.toFixed(2));\n};\nconst CartPage = () => {\n  _s();\n  // { cart, updateProductQuantity, removeFromCart, clearCart }\n  // const [products, setProducts] = useState([]);\n  // const [loading, setLoading] = useState(true);\n  // const { user } = useContext(UserContext);\n\n  //const { cart, setCart, user } = useContext(UserContext);\n  const {\n    cart = [],\n    setCart,\n    user\n  } = useContext(UserContext);\n\n  //const [cart, setCart] = useState(propsCart);\n  //const { user } = useContext(UserContext);\n\n  // const grandTotal = cart.reduce((acc, product) => acc + product.price * product.quantity, 0);\n  // const updateQuantity = async (productID, newQuantity) => {\n  //     if (newQuantity >= 1) {\n  //       await updateProductQuantity(productID, newQuantity);\n  //     }\n  // };\n\n  // useEffect(() => {\n  //     setCart(propsCart);\n  // }, [propsCart]);\n\n  const updateProductQuantity = async (productId, newQuantity) => {\n    const updatedCart = cart.map(item => item.productId === productId ? {\n      ...item,\n      quantity: newQuantity\n    } : item);\n    setCart(updatedCart);\n    if (user !== null && user !== void 0 && user.id) {\n      await updateCartOnServer(user.id, updatedCart);\n    }\n  };\n  const removeFromCart = async productId => {\n    const updatedCart = cart.filter(item => item.productId !== productId);\n    setCart(updatedCart);\n    if (user !== null && user !== void 0 && user.id) {\n      await updateCartOnServer(user.id, updatedCart);\n    }\n  };\n  useEffect(() => {\n    if (user !== null && user !== void 0 && user.id) {\n      fetch(`http://localhost:8080/v1/carts/${user.id}`).then(res => res.json()).then(data => setCart(data.cart));\n    }\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: cart.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: item.productName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: item.quantity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateProductQuantity(item.productId, item.quantity + 1),\n        children: \"Increase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateProductQuantity(item.productId, item.quantity - 1),\n        children: \"Decrease\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => removeFromCart(item.productId),\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this)]\n    }, item.productId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this)\n  /*<div className=\"cartWrapper\">\n      <tbody>\n      </tbody>\n      <h2>Items in cart</h2>\n      <table>\n          <thead>\n              <tr>\n                  <th>Product Photo</th>\n                  <th>Product Name</th>\n                  <th></th>\n                  <th>Quantity</th>\n                  <th>Total</th>\n              </tr>\n          </thead>\n          <tbody>\n              {cart.map((product) => (\n                  <tr key={product.productID}>\n                      <td>\n                          <button onClick={() => productPage(product.productID)} style={{border: 'none', background: 'transparent'}}>\n                              <img src={'/products/' + product.productID + '.webp'} \n                                  alt={\"Image of \" + product.productName} \n                                  width={70} \n                                  style={{border: '2px solid #000', borderRadius: '5px'}} />\n                          </button>\n                      </td>\n                      <td>{product.productName}</td>\n                      <td><button onClick={() => removeFromCart(product.productID)} className=\"removeBtn\">Remove</button></td>\n                      <td>\n                          <span>Qty:</span>\n                          <input type=\"number\" value={product.quantity || 1} onChange={(e) => updateQuantity(product.productID, parseInt(e.target.value))} className=\"quantityInput\" />\n                      </td>\n                      <td>Total: ${roundedQuantity(product.price * (product.quantity || 1))}</td>\n                  </tr>\n              ))}\n          </tbody>\n      </table>\n      <div className=\"clearCartGroup\">\n          <button onClick={clearCart} className=\"clearCart\">Clear Cart</button>\n          <span>Grand Total: ${roundedQuantity(grandTotal)}</span>\n      </div>\n      <div className=\"buttonsGroup\">\n          <button className=\"continueBtn\">Continue Shopping</button>\n          <button className=\"checkoutBtn\">Proceed To Checkout</button>\n      </div>\n  </div> */;\n};\n_s(CartPage, \"bble10XGeir2SSlMqBWRGlxzSHY=\");\n_c = CartPage;\nexport default CartPage;\nvar _c;\n$RefreshReg$(_c, \"CartPage\");","map":{"version":3,"names":["React","useContext","useEffect","UserContext","jsxDEV","_jsxDEV","updateCartOnServer","userId","cart","fetch","method","headers","body","JSON","stringify","productPage","productID","window","location","href","roundedQuantity","quantity","parseFloat","toFixed","CartPage","_s","setCart","user","updateProductQuantity","productId","newQuantity","updatedCart","map","item","id","removeFromCart","filter","then","res","json","data","children","productName","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/Kiran/github-classroom/SEPT/team-project-group-p03-08/frontend/comparison-shopper/src/Components/CartPage.js"],"sourcesContent":["// import React, { useEffect, useState, useContext } from 'react';\n// import { useParams } from 'react-router-dom';\n// import './CartPage.css';\n// import { UserContext } from '../App';\n\nimport React, { useContext, useEffect } from 'react';\nimport { UserContext } from '../App';\n\nasync function updateCartOnServer(userId, cart) {\n  await fetch(`http://localhost:8080/v1/carts/update`, {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ userId, cart })\n  });\n}\n\n\nconst productPage = (productID) => {\n    window.location.href = `/product/${productID}`;\n};\n\nconst roundedQuantity = (quantity) => {\n    return parseFloat(quantity.toFixed(2));\n} \n\nconst CartPage = () => {\n    // { cart, updateProductQuantity, removeFromCart, clearCart }\n    // const [products, setProducts] = useState([]);\n    // const [loading, setLoading] = useState(true);\n    // const { user } = useContext(UserContext);\n\n    //const { cart, setCart, user } = useContext(UserContext);\n    const { cart = [], setCart, user } = useContext(UserContext);\n\n    //const [cart, setCart] = useState(propsCart);\n    //const { user } = useContext(UserContext);\n\n    // const grandTotal = cart.reduce((acc, product) => acc + product.price * product.quantity, 0);\n    // const updateQuantity = async (productID, newQuantity) => {\n    //     if (newQuantity >= 1) {\n    //       await updateProductQuantity(productID, newQuantity);\n    //     }\n    // };\n\n    // useEffect(() => {\n    //     setCart(propsCart);\n    // }, [propsCart]);\n\n    const updateProductQuantity = async (productId, newQuantity) => {\n        const updatedCart = cart.map(item => \n          item.productId === productId ? {...item, quantity: newQuantity} : item\n        );\n        setCart(updatedCart);\n        if (user?.id) {\n          await updateCartOnServer(user.id, updatedCart);\n        }\n      };\n    \n      const removeFromCart = async (productId) => {\n        const updatedCart = cart.filter(item => item.productId !== productId);\n        setCart(updatedCart);\n        if (user?.id) {\n          await updateCartOnServer(user.id, updatedCart);\n        }\n      };\n    \n      useEffect(() => {\n        if (user?.id) {\n          fetch(`http://localhost:8080/v1/carts/${user.id}`)\n            .then(res => res.json())\n            .then(data => setCart(data.cart));\n        }\n      }, [user]);\n    \n  \n    return (\n\n    <div>\n        {/* Render cart items */}\n        {cart.map(item => (\n            <div key={item.productId}>\n            <span>{item.productName}</span>\n            <span>{item.quantity}</span>\n            <button onClick={() => updateProductQuantity(item.productId, item.quantity + 1)}>Increase</button>\n            <button onClick={() => updateProductQuantity(item.productId, item.quantity - 1)}>Decrease</button>\n            <button onClick={() => removeFromCart(item.productId)}>Remove</button>\n            </div>\n        ))}\n    </div>\n        /*<div className=\"cartWrapper\">\n            <tbody>\n            </tbody>\n            <h2>Items in cart</h2>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Product Photo</th>\n                        <th>Product Name</th>\n                        <th></th>\n                        <th>Quantity</th>\n                        <th>Total</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {cart.map((product) => (\n                        <tr key={product.productID}>\n                            <td>\n                                <button onClick={() => productPage(product.productID)} style={{border: 'none', background: 'transparent'}}>\n                                    <img src={'/products/' + product.productID + '.webp'} \n                                        alt={\"Image of \" + product.productName} \n                                        width={70} \n                                        style={{border: '2px solid #000', borderRadius: '5px'}} />\n                                </button>\n                            </td>\n                            <td>{product.productName}</td>\n                            <td><button onClick={() => removeFromCart(product.productID)} className=\"removeBtn\">Remove</button></td>\n                            <td>\n                                <span>Qty:</span>\n                                <input type=\"number\" value={product.quantity || 1} onChange={(e) => updateQuantity(product.productID, parseInt(e.target.value))} className=\"quantityInput\" />\n                            </td>\n                            <td>Total: ${roundedQuantity(product.price * (product.quantity || 1))}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n            <div className=\"clearCartGroup\">\n                <button onClick={clearCart} className=\"clearCart\">Clear Cart</button>\n                <span>Grand Total: ${roundedQuantity(grandTotal)}</span>\n            </div>\n            <div className=\"buttonsGroup\">\n                <button className=\"continueBtn\">Continue Shopping</button>\n                <button className=\"checkoutBtn\">Proceed To Checkout</button>\n            </div>\n        </div> */\n    );\n}\n\nexport default CartPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}